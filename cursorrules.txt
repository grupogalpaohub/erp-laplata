==========================
CursorRules ‚Äî Laplata ERP/CRM (v2, blindado)
==========================

Objetivo: impedir drift entre Supabase (DB), GitHub (c√≥digo/migrations) e Cloudflare Pages (frontend), e proibir ‚Äúatalhos‚Äù (NUNCA inventar dado/esquema). Qualquer desvio ‚Üí PARE e pe√ßa autoriza√ß√£o.

Database Rules (Supabase) ‚Äî FONTE DE VERDADE

O Supabase (Postgres) √© o schema oficial.

SEMPRE introspectar o Supabase (Supabase JS/pg) antes de gerar SQL, tipos ou modelos.

PROIBIDO inventar colunas/tabelas/enums/√≠ndices/PK/FK/triggers/views ou renomear campos ‚Äúpara facilitar‚Äù.

Mudan√ßas de schema ‚Üí OBRIGATORIAMENTE migration versionada em /db/migrations (formato VYYYYMMDD__descricao.sql).

Snapshot do schema: /db/schema.sql (commitado) ‚Äî s√≥ atualizar ap√≥s aplicar migrations.

Seeds iniciais: /db/initial_load.sql. N√£o inventar dados. N√£o criar ‚Äúdados de teste‚Äù fora dos seeds.

Customiza√ß√µes (ENUM/Trigger/√çndice/Function): /db/customizing.sql, idempotente.

PROIBIDO metacomandos psql (\d, \ir, \copy). Usar SQL puro compat√≠vel com Supabase.

Frontend Rules (Next.js em Cloudflare Pages/Workers)

Runtime Edge. N√£o usar APIs Node-only em Server Components (fs, path, process.cwd, crypto Node) ‚Äî use APIs Web.

Supabase no cliente por padr√£o: createBrowserClient (SSR/server-client s√≥ se estritamente necess√°rio e supportado no Edge).

PROIBIDO next export e qualquer artefato est√°tico que intercepte rotas (ex.: public/index.html, public/login.html, out/**, .vercel/output/static/**).

Links absolutos no App Router: href="/mm/vendors", nunca relativos fr√°geis.

Cada rota deve existir via App Router com page.tsx (e loading.tsx/error.tsx para estados).

Rotas obrigat√≥rias que devem abrir 200:

/setup

/login

/analytics

/co/dashboard /co/reports /co/costs

/mm/catalog /mm/vendors /mm/purchases

/sd /sd/orders /sd/customers /sd/invoices

/wh/inventory /wh/movements /wh/reports

/crm/leads /crm/opportunities /crm/activities

/fi/payables /fi/receivables /fi/cashflow

Harmoniza√ß√£o (Supabase ‚Üî GitHub ‚Üî Cloudflare)

Antes de gerar c√≥digo/queries, garantir que /db/schema.sql reflete o Supabase atual.

Se houver diverg√™ncia:

criar migration em /db/migrations;

aplicar no Supabase;

introspectar novamente;

atualizar /db/schema.sql.

Erros de dados/colunas: ajustar o c√≥digo ao schema existente; s√≥ propor DDL em migration se aprovado.

üîí Anti-Simplifica√ß√£o (OBRIGAT√ìRIO)

PROIBIDO:

‚ÄúSimplificar‚Äù removendo/renomeando campos/relacionamentos para passar build.

Criar dados fict√≠cios, defaults m√°gicos, ou ‚Äúexemplos‚Äù que n√£o existam em /db/initial_load.sql.

Trocar ENUM por TEXT ‚Äútemporariamente‚Äù.

Bypassar constraints/trigger/RLS ‚Äús√≥ para funcionar‚Äù.

Trocar tipos (ex.: bigint‚Üítext) sem migration formal.

Alterar policies RLS sem aprova√ß√£o expl√≠cita.

PERMITIDO:

Diagnosticar causa raiz com refer√™ncia ao schema real.

Propor corre√ß√£o via migration m√≠nima, idempotente (com plano de rollback).

Ajustar queries e tipos do frontend para aderir ao schema sem mudar o banco.

SE DER ERRO:

Reportar a mensagem EXATA;

Explicar causa com tabela/coluna concreta;

Sugerir UMA via:

(A) ajuste de c√≥digo para aderir ao schema;

(B) migration DDL m√≠nima;

NUNCA ‚Äúresolver‚Äù inventando dados ou mudando nomes.

Migrations & Idempot√™ncia

Migrations preferencialmente idempotentes (checar exist√™ncia).

ENUM ADD VALUE em transa√ß√£o separada (COMMIT antes de usar).

Fun√ß√µes/Triggers: dropar/recriar sem CASCADE agressivo.

Seeds n√£o alteram schema; se dependem de ENUM, garantir valor antes.

Qualidade & Seguran√ßa

Usar transa√ß√µes (BEGIN/COMMIT) em DDL/DML cr√≠ticas.

Validar PK/UK/FK/triggers/enums ap√≥s migrations (health-check SQL).

NUNCA expor segredos (Supabase/Cloudflare/Google). Usar .env e .env.example.

Logs/mensagens devem citar tabela/coluna e a√ß√£o sugerida. Sem imprimir tokens.

GitHub Rules (reposit√≥rio e commits)

Branch de produ√ß√£o: erp-git. N√£o force-push sem autoriza√ß√£o.

PROIBIDO commitar out/**, .vercel/**, public/*.html (use .gitignore):

.vercel/
.next/
node_modules/
out/


Commits devem descrever o que e por que (ex.: ‚Äúfix(pages): remover est√°ticos e garantir rotas m√≠nimas‚Äù).

Nunca commitar .env com segredos reais.

Cloudflare Pages Rules (deploy e build)

Projeto: erp-laplata (nome fixo).

Build via Next on Pages:

Build command: npm ci && npm run build && npx @cloudflare/next-on-pages

Output dir: .vercel/output

Root directory:

frontend se o app estiver em /frontend;

vazio (raiz) se o app estiver na raiz.

Nunca subir arquivos est√°ticos no repo (Pages deve gerar o bundle no build remoto).

Verifica√ß√£o obrigat√≥ria ap√≥s deploy: aba Functions deve listar todas as rotas. Se vazia ‚Üí ainda h√° est√°tico no repo ou root_dir errado.

Compat flags (quando aplic√°vel):

compatibility_date: usar data atual;

compatibility_flags: ["nodejs_compat_populate_process_env"].

Fluxo ‚ÄúSeguro‚Äù (o Cursor deve seguir SEMPRE)

Limpar repo de artefatos est√°ticos:

Remover do Git (cached) out/**, .vercel/output/**, public/index.html, public/login.html (raiz e/ou frontend/).

Garantir .gitignore com .vercel/, .next/, out/, node_modules/.

Garantir rotas m√≠nimas no App Router (incluir /sd e /login), loading.tsx e error.tsx.

Garantir next.config.js sem output:'export' e package.json com "build": "next build".

Ajustar Cloudflare Pages (se necess√°rio):

Production branch = erp-git;

Root directory = frontend (se o app estiver l√°) ou vazio se na raiz;

Build command / Output dir conforme acima.

Deploy (GitHub ou Direct Upload) sem expor segredos.

Validar:

Aba Functions lista as rotas?

URLs cr√≠ticas retornam 200 (todas as listadas acima).

Se houver 404/503:

NUNCA criar index.html/login.html para ‚Äútapar buraco‚Äù.

Corrigir causa raiz (config do Pages, est√°tico no repo, rota ausente).

Checklist (antes de abrir PR/merge/deploy)

 C√≥digo usa apenas colunas/tabelas/enum existentes no Supabase.

 Se schema mudou: migration em /db/migrations e snapshot /db/schema.sql atualizado.

 Sem mocks de dados no frontend (sem arrays/JSON ‚Äútempor√°rios‚Äù).

 Seeds somente em /db/initial_load.sql.

 Rotas obrigat√≥rias existem em app/‚Ä¶/page.tsx (inclui /sd e /login).

 .gitignore bloqueia .vercel/, .next/, out/, node_modules/.

 Nenhum public/*.html e nenhum .vercel/output/static/*.html no repo.

 Cloudflare Pages configurado: branch, root_dir, build command, output dir.

 Deploy conclu√≠do com Functions listadas e URLs 200.
