# ==========================
# Cursor Rules ‚Äî Laplata ERP/CRM
# ==========================
# Objetivo: impedir drift entre Supabase (DB), GitHub (migrations/c√≥digo) e Cloudflare (frontend),
# e proibir ‚Äúsimplifica√ß√µes‚Äù que fogem do blueprint (NUNCA inventar dado/esquema).

# ==========================
# Database Rules
# ==========================
- O Supabase (Postgres) √© a FONTE DE VERDADE do schema.
- SEMPRE introspectar o Supabase (via Supabase JS ou pg/DATABASE_URL) antes de gerar SQL, tipos ou modelos.
- NUNCA inventar colunas, tabelas, enums, √≠ndices, chaves, triggers, views ou renomear campos ‚Äúpara facilitar‚Äù.
- QUALQUER mudan√ßa de schema deve virar migration versionada em /db/migrations (padr√£o VYYYYMMDD__descricao.sql).
- O snapshot atual do schema deve estar em /db/schema.sql (commitado no GitHub) e deve ser atualizado somente ap√≥s migrations aplicadas.
- Seeds iniciais em /db/initial_load.sql. N√ÉO inventar dados. N√ÉO criar ‚Äúdados de teste‚Äù fora dos arquivos de seeds.
- Customiza√ß√µes (ENUMs/Triggers/√çndices/Functions) em /db/customizing.sql, idempotentes.
- NUNCA usar metacomandos psql (\d, \ir, \copy). Usar SQL puro compat√≠vel com Supabase.

# ==========================
# Frontend Rules (Cloudflare)
# ==========================
- O frontend roda em Cloudflare Pages/Workers.
- O frontend consome o Supabase EXCLUSIVAMENTE via Supabase JS Client (chaves anon/service) ou Edge Functions.
- NUNCA bypassar auth/row level security com ‚Äúmock‚Äù local. NUNCA replicar o banco em arrays/JSON ‚Äútempor√°rios‚Äù.
- Tipagem das chamadas deve refletir o schema real (introspec√ß√£o ou /db/schema.sql).

# ==========================
# Harmoniza√ß√£o (Supabase ‚Üî GitHub ‚Üî Cloudflare)
# ==========================
- Antes de gerar c√≥digo/queries, GARANTIR que /db/schema.sql reflete o estado atual do Supabase.
- Se houver diverg√™ncia: (1) gerar migration em /db/migrations, (2) aplicar no Supabase, (3) introspectar de novo, (4) atualizar /db/schema.sql.
- Alinhar as chamadas do frontend com a tipagem real (tipos gerados por introspec√ß√£o ou snapshot).

# ==========================
# üîí ANTI-SIMPLIFICA√á√ÉO (OBRIGAT√ìRIO)
# ==========================
- PROIBIDO:
  - ‚ÄúSimplificar‚Äù removendo/renomeando campos/relacionamentos para passar build.
  - Criar dados fict√≠cios, defaults m√°gicos, ou ‚Äúexemplos‚Äù que n√£o existam em /db/initial_load.sql.
  - Substituir ENUM por TEXT ‚Äútemporariamente‚Äù.
  - Bypassar valida√ß√µes/constraints/trigger ‚Äús√≥ para funcionar‚Äù.
  - Trocar tipos (ex.: bigint ‚Üí text) sem migration formal.
  - Mexer em RLS/policies para driblar erro de permiss√£o sem aprova√ß√£o expl√≠cita.
- PERMITIDO:
  - Detectar a causa raiz do erro (coluna inexistente, enum faltando, trigger quebrado).
  - Propor a corre√ß√£o via migration versionada, idempotente, com `BEGIN/COMMIT` e checagens `IF NOT EXISTS`.
  - Ajustar queries para respeitar o schema existente (sem alterar o schema).
- SE DER ERRO:
  1) Reportar a mensagem EXATA.
  2) Explicar a causa raiz com refer√™ncia ao schema atual.
  3) Sugerir UMA das duas vias:
     - (A) Ajuste de c√≥digo para aderir ao schema existente; ou
     - (B) Migration (DDL) clara e m√≠nima para adaptar o schema (com plano de rollback se aplic√°vel).
  4) NUNCA ‚Äúresolver‚Äù inventando dados ou mudando nomes.

# ==========================
# Migrations & Idempot√™ncia
# ==========================
- Toda migration deve ser idempotente quando poss√≠vel (verificar exist√™ncia antes de criar/alterar).
- Separar ‚ÄúENUM ADD VALUE‚Äù em transa√ß√£o pr√≥pria e COMMIT antes de usar o novo label (evita erro 55P04).
- Fun√ß√µes/Triggers: dropar depend√™ncias explicitamente antes de recriar; evitar CASCADE agressivo.
- Seeds n√£o alteram schema. Seeds devem falhar com erro claro se dependerem de r√≥tulos ENUM ausentes (ou criar labels antes).

# ==========================
# Qualidade & Seguran√ßa
# ==========================
- Preferir transa√ß√µes (`BEGIN/COMMIT`) nos blocos de DDL/DML cr√≠ticos.
- Validar constraints (PK/UK/FK), triggers e enums ap√≥s migrations (health-check SQL).
- NUNCA expor segredos. Usar `.env` e `.env.example`. N√£o commitar chaves reais.
- Logs e mensagens de erro devem apontar a tabela/coluna exata e a a√ß√£o sugerida.

# ==========================
# Checklists (antes de abrir PR)
# ==========================
- [ ] C√≥digo usa apenas colunas/tabelas/enum existentes no Supabase.
- [ ] Se schema mudou: h√° migration em /db/migrations e snapshot /db/schema.sql atualizado.
- [ ] Nenhum mock de dados substitui o banco (sem arrays/JSON ‚Äútempor√°rios‚Äù).
- [ ] Seeds s√≥ em /db/initial_load.sql. Nada hardcoded no frontend.
- [ ] Queries testadas contra o Supabase real (leitura) e respeitam RLS.
